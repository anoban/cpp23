#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <new>
#include <string>

// --------------------------------------// MACROS TO DEAL WITH COMPILER SPECIFIC IDIOSYNCRACIES //------------------------------------------
#if defined(__GNUG__) && defined(__GNUC__)
    #include <sal.h> // g++ will err without this
#endif

// in LLVM and GCC, __FUNCTION__ and __PRETTY_FUNCTION__ are variables NOT MACROS!
// in MSVC, __FUNCSIG__ can be expanded as a MACRO (Microsoft extension)
#if defined(_MSC_VER) && defined(_MSC_FULL_VER) && !defined(__llvm__) && !defined(__clang__) && !defined(__GNUC__) && !defined(__GNUG__)
    #define __PRETTY_FUNCTION__ __FUNCSIG__
// with g++/clang++/icx fall back to using the variable __PRETTY_FUNCTION__
#endif
// ------------------------------------------------------------------------------------------------------------------------------------------

// ---------------------------------------------------------// HELPERS //--------------------------------------------------------------------
#ifndef LPREFIX
    #define LPREFIX(expression) L"" expression // relies on automatic concatenation of adjacent string literals
#endif

#define __TO_WSTR__(expanded_macro) L##expanded_macro       // helper that actually does the token pasting
#define TO_WSTR(expression)         __TO_WSTR__(expression) // client facing macro

#ifdef __SSTRING_PRINT_METHOD_SIGNATURES_ON_CALL__
    #define print_signature() ::puts(__PRETTY_FUNCTION__)
#else
    #define print_signature()
#endif
// ------------------------------------------------------------------------------------------------------------------------------------------

// -----------------------------------------------// MACROS TO DEAL WITH PRE C++11 STANDARDS //----------------------------------------------
#if __cplusplus < 201103L // prior to C++11
    #define noexcept throw()
    // #define noexcept(...) throw(__VA_ARGS__) // this doesn't help with transforming the nested noexcept(expr) operators into throw(expr)
    #define nullptr  NULL
    #define __CPLUSPLUS_PRE_CPP11
    #define __CXX_ATTRIBUTE_SYNTAX__(...)
    #define __CPP11_LVALUE_AMPERSAND__
    #define __CPP11_RVALUE_AMPERSAND__
#else
    #define __CXX_ATTRIBUTE_SYNTAX__(...) __VA_ARGS__
    #define __CPP11_LVALUE_AMPERSAND__    &
    #define __CPP11_RVALUE_AMPERSAND__    &&
#endif
// ------------------------------------------------------------------------------------------------------------------------------------------

namespace __cxx_sstring_internal_impl {

    // resorting to runtime conversion :(
    __CXX_ATTRIBUTE_SYNTAX__(
        [[maybe_unused,
          deprecated("mixing regular ascii stdout and wide character stdout in a single programme is discouraged by Microsoft")]]
    )
    static const wchar_t* wsignature(_In_ const char* _cxx_signature) noexcept {
        static const unsigned _signature_length = 512;
        static wchar_t        _signature[_signature_length]; // NOLINT(modernize-avoid-c-arrays)

        unsigned charcount = 0;
        ::memset(_signature, 0U, _signature_length * sizeof(wchar_t)); // using a raw loop to make this function constexpr
        // static variables are not allowed inside constexpr function bodies, hence we cannot make this function constexpr
        // for (unsigned i = 0; i < _signature_length; ++i) _signature[i] = 0; // NOLINT(cppcoreguidelines-pro-bounds-constant-array-index)

        // NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-pointer-arithmetic,cppcoreguidelines-pro-bounds-constant-array-index)
        while (*_cxx_signature) _signature[charcount++] = static_cast<wchar_t>(*_cxx_signature++);
        assert(charcount <= _signature_length);
        return _signature;
    }

} // namespace __cxx_sstring_internal_impl

class sstring
#ifndef __CPLUSPLUS_PRE_CPP11
    final // final is not a keyword in pre C++11 standard
#endif    // __CPLUSPLUS_PRE_CPP11
{
        // a super trivial string class with NO NON-TRIVIAL OPTIMIZATIONS whatsoever
        // class sstring works with all C++ standards from C++98 to C++23 :)

    public:
#ifdef __CPLUSPLUS_PRE_CPP11
        typedef unsigned long size_type; // g++ with -Wpedantic issues a diagnostic claimimg ISO C++ 1998 does not support 'long long'
#else
        using size_type = unsigned long long;
#endif // __CPLUSPLUS_PRE_CPP11

    private:
        size_type _size;     // inclusive of the null terminator
        size_type _capacity; // at construction, capacity will usually be twice the size of the string
        char*     _resource; // string buffer

        // a private, aggregate initializer like ctor
        __cdecl sstring(_In_ char* const buffer, _In_ const size_type& size, _In_ const size_type& capacity) noexcept :
            _size(size), _capacity(capacity), _resource(buffer) {
            assert(buffer);
            print_signature();
        }

    public:
        __cdecl sstring() noexcept : _size(0), _capacity(0), _resource(nullptr) { // default ctor
            print_signature();
        }

        __cdecl sstring(_In_ const char& ch, _In_ const size_type& repeats) noexcept :
            _size(repeats + 1), _capacity(_size * 2), _resource(new (std::nothrow) char[_capacity]) {
            print_signature();
            if (!_resource) { // has the allocation failed,
                _capacity = _size = 0;
                ::fputws(L"allocation failure!\n", stderr);
                return; // leaves an empty sstring skeleton
            }

            ::memset(_resource, 0U, _capacity); // zero out the whole buffer
            ::memset(_resource, ch, repeats);
        }

        template<size_t len> __cdecl sstring(_In_ const char (&string)[len]) noexcept : // NOLINT(google-explicit-constructor)
            _size(len), _capacity(_size * 2), _resource(new (std::nothrow) char[_capacity]) {
            print_signature();
            if (!_resource) { // has the allocation failed,
                _capacity = _size = 0;
                ::fputws(L"allocation failure!\n", stderr);
                return;
            }

            ::memset(_resource, 0U, _capacity);
            ::strcpy_s(_resource, _size, string);
        }

#if 1
        __CXX_ATTRIBUTE_SYNTAX__(
            [[deprecated("use the more efficient templated version when using string literals to construct a ::sstring object!")]]
        )
        explicit __cdecl sstring(_In_ const char* const string) noexcept :
            _size(::strlen(string) + 1 /* +1 for the null terminator */),
            _capacity(_size * 2),
            _resource(new (std::nothrow) char[_capacity]) {
            // using ::strlen(str) here and using _size + 1 in strcpy_s will bite us in the ass when trying to copy or move
            assert(string);
            print_signature();
            if (!_resource) { // has the allocation failed,
                _capacity = _size = 0;
                ::fputws(L"allocation failure!\n", stderr);
                return;
            }

            ::memset(_resource, 0U, _capacity);
            ::strcpy_s(_resource, _size, string);
        }
#endif // 1

        __cdecl sstring(_In_ const sstring& other) noexcept : // not exactly a trivial copy constructor
            _size(other._size),
            _capacity(_size * 2 /* choosing not to simply use the other string's capacity */),
            _resource(new (std::nothrow) char[_capacity]) {
            print_signature();
            if (!_resource) { // has the allocation failed,
                _capacity = _size = 0;
                ::fputws(L"allocation failure!\n", stderr);
                return;
            }

            ::memset(_resource, 0U, _capacity);
            ::strcpy_s(_resource, _size, other._resource);
        }

        __cdecl sstring(_In_ const std::string& other) noexcept : // NOLINT(google-explicit-constructor) - converting constructor
            _size(other.length() + 1),                            // std::string::length() doesn't count the null terminator
            _capacity(_size * 2 /* choosing not to simply use the other string's capacity */),
            _resource(new (std::nothrow) char[_capacity]) {
            print_signature();
            if (!_resource) { // has the allocation failed,
                _capacity = _size = 0;
                ::fputws(L"allocation failure!\n", stderr);
                return;
            }

            ::memset(_resource, 0U, _capacity);
            ::strcpy_s(_resource, other.length() + 1, other.data());
        }

        // TODO :: implement ctors taking a pair of iterators as arguments!!
        template<class iterator_type>
        sstring(_In_ iterator_type beg, _In_ iterator_type end) /* noexcept(noexcept(beg++)) gets problematic with pre C++11 standards */ :
            _size(std::distance(beg, end)), _capacity(_size * 2), _resource(new (std::nothrow) char[_capacity]) {
            print_signature();
            if (!_resource) { // has the allocation failed,
                _capacity = _size = 0;
                ::fputws(L"allocation failure!\n", stderr);
                return;
            }

            ::memset(_resource, 0U, _capacity);
            std::copy(beg, end, _resource);
        }

        // optimizations like buffer reuse are deliberately ignored :(
        sstring& __cdecl operator=(_In_ const sstring& other) noexcept {
            print_signature();
            if (this == &other) return *this;

            delete[] _resource; // give up the old buffer
            _size     = other._size;
            _capacity = other._size * 2 + 1; // choosing not to simply use the other string's capacity
            _resource = new (std::nothrow) char[_capacity];

            if (!_resource) { // has the allocation failed,
                _size = _capacity = 0;
                ::fputws(L"allocation failure!\n", stderr);
                return *this;
            }

            ::memset(_resource, 0U, _capacity);
            ::strcpy_s(_resource, _size, other._resource);
            return *this;
        }

#ifndef __CPLUSPLUS_PRE_CPP11
        // move ctor
        __cdecl sstring(_Inout_ sstring&& other) noexcept : _size(other._size), _capacity(other._capacity), _resource(other._resource) {
            print_signature();
            other._resource = nullptr;
            other._size = other._capacity = 0;
        }

        // move assignment operator
        sstring& __cdecl operator=(_Inout_ sstring&& other) noexcept {
            print_signature();
            if (this == &other) return *this;

            delete[] _resource; // give up the old buffer
            _size           = other._size;
            _capacity       = other._capacity;
            _resource       = other._resource;

            other._resource = nullptr;
            other._size = other._capacity = 0;

            return *this;
        }

#endif // !__CPLUSPLUS_PRE_CPP11

        __cdecl ~sstring() noexcept {
            print_signature();
            delete[] _resource;
            _resource = nullptr;
            _size = _capacity = 0;
        }

        static sstring __cdecl with_capacity(_In_ const size_type& size) noexcept { // a Rust style static ctor
            print_signature();

            char* const buffer = new (std::nothrow) char[size];
            if (!buffer) { // has the allocation failed,
                ::fputws(L"allocation failure!\n", stderr);
                return sstring(); // a default constructed ::sstring
            }

            return sstring(buffer, 0, size); // NOLINT(modernize-return-braced-init-list)
        }

        // NOLINTNEXTLINE(google-explicit-constructor - implicit conversion function
        __cdecl operator std::string() const noexcept { return std::string(cbegin(), cend()); }

        size_type __stdcall length() const noexcept { return _size; }

        size_type __stdcall capacity() const noexcept { return _capacity; }

        char* __cdecl c_str() noexcept { return _resource; }

        const char* __cdecl c_str() const noexcept { return _resource; }

        // operator usable for lvalues and rvalues for operands
        sstring __cdecl operator+(_In_ const sstring& other) const noexcept {
            print_signature();

            char* const buffer = new (std::nothrow) char[(_size + other._size) * 2]; // has space for 2 null terminators
            if (!buffer) {                                                           // has the allocation failed,
                ::fputws(L"allocation failure!\n", stderr);
                return sstring(); // a default constructed ::sstring
            }

            ::memset(buffer, 0U, (_size + other._size) * 2);
            ::strcpy_s(buffer, _size, _resource); // copy this buffer
            ::strcpy_s(                           // NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-pointer-arithmetic)
                buffer + _size - 1 /* start @ the null terminator of the first string */,
                other._size,
                other._resource
            ); // copy other's buffer

            return sstring( // NOLINT(modernize-return-braced-init-list)
                buffer,
                _size + other._size - 1 /* discount the null terminator of the first string */,
                (_size + other._size) * 2
            );
        }

        // when concatenating a string literal, use this operator to bypass concatenation following the creation of a temporary
        template<size_t len> sstring __cdecl operator+(const char (&other)[len]) const noexcept {
            print_signature();

            char* const buffer = new (std::nothrow) char[(_size + len) * 2]; // has space for 2 null terminators
            if (!buffer) {                                                   // has the allocation failed,
                ::fputws(L"allocation failure!\n", stderr);
                return sstring();
            }

            ::memset(buffer, 0U, (_size + len) * 2);
            ::strcpy_s(buffer, _size, _resource); // copy this buffer
            ::strcpy_s(                           // NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-pointer-arithmetic)
                buffer + _size - 1 /* start @ the null terminator of the first string */,
                len,
                other
            ); // copy other's buffer

            return sstring(buffer, _size + len - 1, (_size + len) * 2); // NOLINT(modernize-return-braced-init-list)
        }

        // operator usable only with lvalue left operands
        sstring& __cdecl operator+=(_In_ const sstring& other) __CPP11_LVALUE_AMPERSAND__ noexcept {
            print_signature();

            char* const buffer = new (std::nothrow) char[(_size + other._size) * 2];
            if (!buffer) { // has the allocation failed,
                ::fputws(L"allocation failure!\n", stderr);
                return *this;
            }
            _capacity = (_size + other._size) * 2; // use the previous state of _size before mutating it

            ::memset(buffer, 0U, _capacity);
            ::strcpy_s(buffer, _size /* older size */, _resource);
            ::strcpy_s( // NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-pointer-arithmetic)
                buffer + _size - 1 /* start @ the null terminator of the first string */,
                other._size,
                other._resource
            ); // copy other's buffer

            _size = _size + other._size - 1; // discount the null terminator of the first string
            delete[] _resource;
            _resource = buffer;

            return *this;
        }

        template<size_t len> sstring& __cdecl operator+=(const char (&other)[len]) __CPP11_LVALUE_AMPERSAND__ noexcept {
            print_signature();

            char* const new_buffer = new (std::nothrow) char[(_size + len) * 2];
            if (!new_buffer) { // has the allocation failed,
                ::fputws(L"allocation failure!\n", stderr);
                return *this;
            }
            _capacity = (_size + len) * 2; // use the previous state of _size before mutating it

            ::memset(new_buffer, 0U, _capacity);
            ::strcpy_s(new_buffer, _size /* older size */, _resource);
            ::strcpy_s( // NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-pointer-arithmetic)
                new_buffer + _size - 1 /* start @ the null terminator of the first string */,
                len,
                other
            ); // copy other's buffer

            _size = _size + len - 1; // discount the null terminator of the first string
            delete[] _resource;
            _resource = new_buffer;

            return *this;
        }

        bool __cdecl operator==(_In_ const sstring& other) const noexcept {
            if (this == &other) return true;
            if (_size != other._size) return false;

            for (unsigned long i = 0; i < _size; ++i)
                if (_resource[i] != other._resource[i]) return false; // NOLINT(cppcoreguidelines-pro-bounds-pointer-arithmetic)

            return true;
        }

        bool __cdecl operator==(_In_ const char* const string) const noexcept {
            if (!string) return false;
            return !::strncmp(_resource, string, _size);
        }

        template<size_t len> bool __cdecl operator==(_In_ const char (&string)[len]) const noexcept {
            if (!string) return false;
            if (len != _size) return false;
            return !::strncmp(_resource, string, _size);
        }

        // to make the equality comparisons valid in both directions
        friend bool __cdecl operator==(_In_ const char* const array, _In_ const sstring& string) noexcept {
            if (!array) return false;
            return !::strncmp(string._resource, array, string._size);
        }

        template<size_t len> friend bool __cdecl operator==(_In_ const char (&str)[len], _In_ const sstring& string) noexcept {
            if (!str) return false;
            if (len != string._size) return false;
            return !::strncmp(string._resource, str, string._size);
        }

        friend std::ostream& __cdecl operator<<(_Inout_ std::ostream& ostream, _In_ const sstring& string) noexcept {
            ostream << string.c_str();
            return ostream;
        }

        char* __stdcall begin() noexcept { return _resource; }

        char* __stdcall end() noexcept { return _resource + _size; } // NOLINT(cppcoreguidelines-pro-bounds-pointer-arithmetic)

        const char* __stdcall begin() const noexcept { return _resource; }

        // NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-pointer-arithmetic)
        const char* __stdcall end() const noexcept { return _resource + _size; }

        const char* __stdcall cbegin() const noexcept { return _resource; }

        // NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-pointer-arithmetic)
        const char* __stdcall cend() const noexcept { return _resource + _size; }

        char& __stdcall at(size_type& offset) noexcept {
            assert(offset < _size);
            return _resource[offset]; // NOLINT(cppcoreguidelines-pro-bounds-pointer-arithmetic)
        }

        const char& __stdcall at(size_type& offset) const noexcept {
            assert(offset < _size);
            return _resource[offset]; // NOLINT(cppcoreguidelines-pro-bounds-pointer-arithmetic)
        }

        char& __stdcall operator[](size_type& offset) noexcept {
            assert(offset < _size);
            return _resource[offset]; // NOLINT(cppcoreguidelines-pro-bounds-pointer-arithmetic)
        }

        const char& __stdcall operator[](size_type& offset) const noexcept {
            assert(offset < _size);
            return _resource[offset]; // NOLINT(cppcoreguidelines-pro-bounds-pointer-arithmetic)
        }

        template<size_t len> friend ::sstring __cdecl operator+(
            _In_ const char (&str)[len] /* compiler will accomodate the null terminator in this length */, _In_ const ::sstring& string
        ) noexcept {
            print_signature();

            char* const buffer = new (std::nothrow) char[(len + string._size) * 2]; // has space for 2 null terminators
            if (!buffer) {                                                          // has the allocation failed,
                ::fputws(L"allocation failure!\n", stderr);
                return sstring();
            }

            ::memset(buffer, 0U, (len + string._size) * 2);
            ::strcpy_s(buffer, len, str); // copy string literal into ::sstring's buffer
            ::strcpy_s(                   // NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-pointer-arithmetic)
                buffer + len - 1 /* start @ the null terminator of the first string */,
                string._size,
                string._resource
            ); // copy ::sstring object's internal buffer

            return sstring(buffer, len + string._size - 1, (len + string._size) * 2); // NOLINT(modernize-return-braced-init-list)
        }
};

#ifndef __CPLUSPLUS_PRE_CPP11
static_assert(std::is_standard_layout<::sstring>::value); // std::is_standard_layout_v is only available with standards C++17 and later
static_assert(sizeof(::sstring) == 24);
#endif

#if __cplusplus < 201103L // undefine the defined macros
    #undef noexcept
    #undef nullptr
    #undef __SSTRING_NO_MOVE_SEMANTICS__
    #undef __CPLUSPLUS_PRE_CPP11
#endif

#undef print_signature // trailing parenthesis is not necessary to undefine a macro
